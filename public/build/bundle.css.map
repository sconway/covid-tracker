{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import * as d3 from \"d3\";\n    import * as THREE from \"THREE\";\n    import * as TWEEN from \"@tweenjs/tween.js\";\n    // import * as countryDetails from \"../json/countries.json\";\n    import { onMount } from \"svelte\";\n    import { fetchCountryData } from \"./api/api\";\n    import { country, countryInfo, isCountryClicked, isCountryHovered } from \"./stores/country.js\";\n    import { onCountryHoverOff } from \"./globeEventHandlers/globeMouseMove\";\n    import { initScene } from \"./utils/sceneUtils/scene\";\n    import { loadMap } from \"./utils/mapUtils/loadMap\";\n    import { setCountryImageBack } from \"./utils/utils.js\";\n\n    let camera;\n    let cloud;\n    let controls;\n    let countries;\n    let earth;\n    let root;\n    let renderer;\n    let scene;\n    let numberFormat = Intl.NumberFormat();\n\n    /**\n     * Initializes the scene, renderer, and camera.\n     */\n    const initThreeJSObjects = () => {\n        const canvas = d3\n            .select(\"#three-container\")\n            .append(\"canvas\")\n            .attr(\"width\", window.innerWidth)\n            .attr(\"height\", window.innerHeight);\n\n        canvas.node().getContext(\"webgl\");\n\n        scene = new THREE.Scene();\n        renderer = new THREE.WebGLRenderer({\n            alpha: true,\n            antialias: true,\n            canvas: canvas.node(),\n        });\n        camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 10000);\n    };\n\n    /**\n     * Called when the DOM is first mounted.\n     */\n    onMount(async () => {\n        countries = await fetchCountryData();\n        initThreeJSObjects();\n        initScene(scene, renderer, camera);\n        loadMap(scene, renderer, camera);\n        setEarthAndClouds();\n        animate();\n    });\n\n    /**\n     * Loop used for rendering and updating values.\n     */\n    const animate = (time) => {\n        update();\n        renderer.render(scene, camera);\n        requestAnimationFrame(animate);\n    };\n\n    const getCountryCovidStats = (countryData, property) => {\n        if (countryData && countries && countries.length > 0) {\n            const country = countries.find(country => countryData.countryCode === country.code);\n            return country && country[property] ? country[property] : \"\";\n        }\n\n        return \"\";\n    }\n\n    const getCountryInformation = (countryInfo, property) => {\n        if (countryInfo) return countryInfo[property];\n\n        return null;\n    }\n\n    const setEarthAndClouds = () => {\n        cloud = scene.getObjectByName(\"cloud\");\n        root = scene.getObjectByName(\"root\");\n    };\n\n    /**\n     * Called by the animation function about 60 times per second. \n     * Updates any values that are used for animation or control.\n     */\n    const update = () => {\n      if (!$isCountryHovered) {\n        if (cloud) cloud.rotation.y += 0.000625;\n        if (root && !$isCountryClicked) root.rotation.y += 0.0005;\n        // update any transitions on existing tweens\n        TWEEN.default.update();\n      }\n    };\n\n    /**\n    * Called when the back button is clicked. Updates the shared state, \n    * and sets the globe images back to their original state.\n    */\n    const handleBackButtonClick = () => {\n        isCountryClicked.update((c) => false);\n        countryInfo.update((c) => {});\n        setCountryImageBack(scene);\n        onCountryHoverOff(scene);\n    }\n\n    let countryName = getCountryCovidStats($country, \"country\");\n    let confirmedCases = getCountryCovidStats($country, \"confirmed\");\n    let criticalCases = getCountryCovidStats($country, \"critical\");\n    let deaths = getCountryCovidStats($country, \"deaths\");\n</script>\n\n<svelte:head>\n    <link href=\"https://fonts.googleapis.com/css2?family=Play:wght@400;700&display=swap\" rel=\"stylesheet\">\n</svelte:head>\n\n<main>\n    <h2 class=\"country-name\" class:active=\"{$isCountryClicked}\">{getCountryCovidStats($country, \"country\")}</h2>\n    \n    <aside class=\"country-data\" class:active=\"{$isCountryClicked}\">\n        {#if $isCountryClicked && getCountryInformation($countryInfo, \"capital\")}\n            <div class=\"country-data--wrapper\">\n                <p class=\"country-data--category\">\n                    Capital city: \n                </p>\n                <p class=\"country-data--metric\">\n                    {getCountryInformation($countryInfo, \"capital\")}\n                </p>\n            </div>\n        {/if}\n\n        {#if $isCountryClicked && getCountryInformation($countryInfo, \"population\")}\n            <div class=\"country-data--wrapper\">\n                <p class=\"country-data--category\">\n                    Population: \n                </p>\n                <p class=\"country-data--metric\">\n                    {getCountryInformation($countryInfo, \"population\")}\n                </p>\n            </div>\n        {/if}\n\n        {#if $isCountryClicked && getCountryInformation($countryInfo, \"population\") && getCountryCovidStats($country, \"confirmed\")}\n            <div class=\"country-data--wrapper\">\n                <p class=\"country-data--category\">\n                    Percentage of population infected: \n                </p>\n                <p class=\"country-data--metric\">\n                    {\n                        Number(\n                            (getCountryCovidStats($country, \"confirmed\") / \n                            getCountryInformation($countryInfo, \"population\")) * 100\n                        ).toFixed(2)\n                    }%\n                </p>\n            </div>\n        {/if}\n\n        {#if $isCountryClicked && getCountryCovidStats($country, \"deaths\") && getCountryCovidStats($country, \"confirmed\")}\n            <div class=\"country-data--wrapper\">\n                <p class=\"country-data--category\">\n                    Death rate: \n                </p>\n                <p class=\"country-data--metric\">\n                    {\n                        Number((\n                            getCountryCovidStats($country, \"deaths\") / \n                            (getCountryCovidStats($country, \"confirmed\") + getCountryCovidStats($country, \"recovered\"))\n                        ) * 100).toFixed(2)\n                    }%   \n                </p>\n            </div>\n        {/if}\n\n        {#if getCountryCovidStats($country, \"confirmed\")}\n          <div class=\"country-data--wrapper\">\n              <p class=\"country-data--category country-data--category__yellow\">\n                  Confirmed cases{#if $isCountryClicked}:{/if}\n              </p>\n              <p class=\"country-data--metric\">\n                  {numberFormat.format(getCountryCovidStats($country, \"confirmed\"))}\n              </p>\n          </div>\n        {/if}\n\n        {#if getCountryCovidStats($country, \"critical\")}\n          <div class=\"country-data--wrapper\">\n              <p class=\"country-data--category country-data--category__orange\">\n                  Critical cases{#if $isCountryClicked}:{/if}\n              </p>\n              <p class=\"country-data--metric\">\n                  {numberFormat.format(getCountryCovidStats($country, \"critical\"))} \n              </p>\n          </div>\n        {/if}\n\n        {#if getCountryCovidStats($country, \"deaths\")}\n          <div class=\"country-data--wrapper\">\n              <p class=\"country-data--category country-data--category__red\">\n                  Deaths{#if $isCountryClicked}:{/if}\n              </p>\n              \n              <p class=\"country-data--metric\">\n                  {numberFormat.format(getCountryCovidStats($country, \"deaths\"))} \n              </p>\n          </div>\n        {/if}\n\n        {#if getCountryCovidStats($country, \"recovered\")}\n          <div class=\"country-data--wrapper\">\n              <p class=\"country-data--category country-data--category__green\">\n                  Recovered{#if $isCountryClicked}:{/if}\n              </p>\n              <p class=\"country-data--metric\">\n                  {numberFormat.format(getCountryCovidStats($country, \"recovered\"))} \n              </p>\n          </div>\n        {/if}\n\n    </aside>\n\n    {#if $isCountryClicked}\n        <div class=\"back-button__wrapper\" on:click={handleBackButtonClick}>\n            <span class=\"back-button__arrow\"></span>\n            <span class=\"back-button\">Back</span>\n        </div>\n    {/if}\n\n    <div class=\"container\" class:active=\"{$isCountryClicked}\" id=\"three-container\"></div>\n</main>\n\n<style type=\"text/scss\">:global(body) {\n  cursor: grab;\n  font-family: 'Play', sans-serif;\n  margin: 0;\n  padding: 0; }\n\n:global(body.pointer) {\n  cursor: pointer !important; }\n\nmain {\n  background-color: #232323; }\n\np {\n  margin: 0; }\n\n.back-button {\n  color: #fff;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  transition: letter-spacing 250ms ease; }\n\n.back-button__arrow {\n  background-color: #ffffff;\n  margin-right: 12px;\n  position: relative;\n  height: 2px;\n  width: 20px;\n  transition: margin-right 250ms ease; }\n  .back-button__arrow::before {\n    background-color: #ffffff;\n    content: \"\";\n    height: 2px;\n    width: 10px;\n    top: -3px;\n    left: -2px;\n    position: absolute;\n    transform: rotate(-45deg); }\n  .back-button__arrow::after {\n    background-color: #ffffff;\n    content: \"\";\n    height: 2px;\n    width: 10px;\n    left: -2px;\n    top: 3px;\n    position: absolute;\n    transform: rotate(45deg); }\n\n.back-button__wrapper {\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  position: absolute;\n  right: 20px;\n  top: 20px;\n  z-index: 2; }\n  .back-button__wrapper:hover .back-button__arrow {\n    margin-right: 15px; }\n  .back-button__wrapper:hover .back-button {\n    letter-spacing: 3px; }\n\n.container {\n  position: relative;\n  transition: transform 500ms ease; }\n\n.container.active {\n  transform: translateX(20%); }\n\n.country-name {\n  color: #ffffff;\n  font-size: 4rem;\n  letter-spacing: 5px;\n  line-height: 1.2;\n  margin: 0;\n  position: absolute;\n  top: 20px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: top 300ms ease;\n  width: 100%; }\n  .country-name.active {\n    top: 10px; }\n\n.country-data {\n  align-items: center;\n  display: flex;\n  font-size: 2rem;\n  justify-content: center;\n  position: absolute;\n  bottom: 0;\n  width: 100%; }\n  .country-data.active {\n    bottom: initial;\n    display: flex;\n    align-items: flex-start;\n    flex-direction: column;\n    left: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    width: auto; }\n    .country-data.active .country-data--wrapper {\n      align-items: center;\n      display: flex;\n      font-size: 24px; }\n    .country-data.active .country-data--category {\n      color: #ffffff;\n      font-size: 18px;\n      margin-right: 15px; }\n\n.country-data--wrapper {\n  color: #ffffff;\n  padding: 12px 20px;\n  text-align: center; }\n\n.country-data--category__green {\n  color: green; }\n\n.country-data--category__yellow {\n  color: yellow; }\n\n.country-data--category__orange {\n  color: orange; }\n\n.country-data--category__red {\n  color: red; }\n\n@media (min-width: 1068px) {\n  .country-data.active .country-data--wrapper {\n    font-size: 28px; }\n  .country-data.active .country-data--category {\n    font-size: 22px; } }\n\n@media (min-width: 1400px) {\n  .country-data.active .country-data--wrapper {\n    font-size: 32px; }\n  .country-data.active .country-data--category {\n    font-size: 26px; } }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}